{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/dashboard/dashboard.component.css","webpack:///./src/app/components/dashboard/dashboard.component.html","webpack:///./src/app/components/dashboard/dashboard.component.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/profile/profile.component.css","webpack:///./src/app/components/profile/profile.component.html","webpack:///./src/app/components/profile/profile.component.ts","webpack:///./src/app/components/register/register.component.css","webpack:///./src/app/components/register/register.component.html","webpack:///./src/app/components/register/register.component.ts","webpack:///./src/app/guards/auth.guard.ts","webpack:///./src/app/services/auth.service.ts","webpack:///./src/app/services/validate.service.ts","webpack:///./src/app/testServer.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,+DAA+D,+H;;;;;;;;;;;ACA/D,uJ;;;;;;;;;;;;;;;;;ACAA,gCAAgC;AACU;AAS1C;IAPA;QAQE,UAAK,GAAG,aAAa,CAAC;IACxB,CAAC;IAFY,YAAY;QAPxB,+DAAS,CAAC;YACT,8CAA8C;YAC9C,QAAQ,EAAE,UAAU;YACpB,kDAAkD;YAClD,yFAAmC;;SAEpC,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVzB,oEAAoE;AACV;AACjB;AACI;AACF;AACY;AAER;AACwB;AACH;AACS;AACZ;AACe;AACN;AAEZ;AACR;AACQ;AAEf;AACC;AAEhD,IAAM,SAAS,GAAW;IACxB,8BAA8B;IAC9B,EAAC,IAAI,EAAC,EAAE,EAAE,SAAS,EAAE,8EAAa,EAAC;IACnC,EAAC,IAAI,EAAC,UAAU,EAAE,SAAS,EAAE,yFAAiB,EAAC;IAC/C,EAAC,IAAI,EAAC,OAAO,EAAE,SAAS,EAAE,gFAAc,EAAC;IACzC,EAAC,IAAI,EAAC,WAAW,EAAE,SAAS,EAAE,6FAAkB,EAAE,WAAW,EAAC,CAAC,6DAAS,CAAC,EAAC;IAC1E,EAAC,IAAI,EAAC,SAAS,EAAE,SAAS,EAAE,uFAAgB,EAAE,WAAW,EAAC,CAAC,6DAAS,CAAC,EAAC;CACvE;AAED,iEAAiE;AAC1D,SAAS,WAAW;IACzB,OAAO,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AAC1C,CAAC;AA+BD;IAAA;IAAyB,CAAC;IAAb,SAAS;QA7BrB,8DAAQ,CAAC;YACR,qDAAqD;YACrD,YAAY,EAAE;gBACZ,2DAAY;gBACZ,mFAAe;gBACf,gFAAc;gBACd,yFAAiB;gBACjB,8EAAa;gBACb,6FAAkB;gBAClB,uFAAgB;aACjB;YACD,qCAAqC;YACrC,OAAO,EAAE;gBACP,uEAAa;gBACb,0DAAW;gBACX,wDAAU;gBACV,4DAAY,CAAC,OAAO,CAAC,SAAS,CAAC;gBAC/B,sBAAsB;gBACtB,4EAAmB,CAAC,OAAO,EAAE;gBAC7B,6DAAS,CAAC,OAAO,CAAC;oBAChB,MAAM,EAAE;wBACN,WAAW,EAAE,WAAW;qBACzB;iBACF,CAAC;aACH;YACD,wCAAwC;YACxC,SAAS,EAAE,CAAC,2EAAe,EAAE,mEAAW,EAAE,6DAAS,CAAC;YACpD,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;ACjEtB,+DAA+D,mK;;;;;;;;;;;ACA/D,wI;;;;;;;;;;;;;;;;;ACAkD;AAOlD;IAEE;IAAgB,CAAC;IAEjB,qCAAQ,GAAR;IACA,CAAC;IALU,kBAAkB;QAL9B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;YACzB,0HAAyC;;SAE1C,CAAC;;OACW,kBAAkB,CAO9B;IAAD,yBAAC;CAAA;AAP8B;;;;;;;;;;;;ACP/B,+DAA+D,uJ;;;;;;;;;;;ACA/D,qrF;;;;;;;;;;;;;;;;;ACAkD;AAOlD;IAEE;IAAgB,CAAC;IAEjB,gCAAQ,GAAR;IACA,CAAC;IALU,aAAa;QALzB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,2GAAoC;;SAErC,CAAC;;OACW,aAAa,CAOzB;IAAD,oBAAC;CAAA;AAPyB;;;;;;;;;;;;ACP1B,+DAA+D,uJ;;;;;;;;;;;ACA/D,2jB;;;;;;;;;;;;;;;;;;;;;ACAkD;AACQ;AACjB;AACsB;AAO/D;IAKE,wBACU,WAAuB,EACvB,MAAa,EACb,YAAiC;QAFjC,gBAAW,GAAX,WAAW,CAAY;QACvB,WAAM,GAAN,MAAM,CAAO;QACb,iBAAY,GAAZ,YAAY,CAAqB;IACrC,CAAC;IAEP,iCAAQ,GAAR;IACA,CAAC;IAED,sCAAa,GAAb;QAAA,iBAuBC;QAtBC,8BAA8B;QAC9B,IAAM,IAAI,GAAG;YACX,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB;QAED,mDAAmD;QACnD,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,cAAI;YACpD,qBAAqB;YACrB,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBACtD,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,uBAAuB,EAAE;oBAC9C,QAAQ,EAAE,eAAe;oBACzB,OAAO,EAAE,IAAI;iBAAC,CAAC,CAAC;gBAChB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;aACvC;iBAAM;gBACL,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;oBAC/B,QAAQ,EAAE,cAAc;oBACxB,OAAO,EAAE,IAAI;iBAAC,CAAC,CAAC;gBAChB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;aACnC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IArCU,cAAc;QAL1B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,8GAAqC;;SAEtC,CAAC;+EAOsB,kEAAW;YAChB,sDAAM;YACA,4EAAoB;OARhC,cAAc,CAsC1B;IAAD,qBAAC;CAAA;AAtC0B;;;;;;;;;;;;ACV3B,+DAA+D,2J;;;;;;;;;;;ACA/D,glBAAglB,YAAY,2RAA2R,YAAY,qQAAqQ,YAAY,2PAA2P,YAAY,kPAAkP,YAAY,qV;;;;;;;;;;;;;;;;;;;;;ACAvmD;AACQ;AACjB;AACsB;AAO/D;IAEE,yBACS,WAAuB,EACtB,MAAa,EACb,YAAiC;QAFlC,gBAAW,GAAX,WAAW,CAAY;QACtB,WAAM,GAAN,MAAM,CAAO;QACb,iBAAY,GAAZ,YAAY,CAAqB;IACrC,CAAC;IAEP,kCAAQ,GAAR;IACA,CAAC;IAED;;OAEG;IACH,uCAAa,GAAb;QACE,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;QAC1B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,oBAAoB,EAAE;YAC3C,QAAQ,EAAE,eAAe;YACzB,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACjC,OAAO,KAAK,CAAC;IACf,CAAC;IAtBU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;YACtB,iHAAsC;;SAEvC,CAAC;+EAIqB,kEAAW;YACf,sDAAM;YACA,4EAAoB;OALhC,eAAe,CAuB3B;IAAD,sBAAC;CAAA;AAvB2B;;;;;;;;;;;;ACV5B,+DAA+D,+J;;;;;;;;;;;ACA/D,uKAAuK,WAAW,8FAA8F,eAAe,kDAAkD,YAAY,yB;;;;;;;;;;;;;;;;;;;ACA3S;AACQ;AACjB;AAOzC;IAOE,0BACU,WAAuB,EACvB,MAAa;QADb,gBAAW,GAAX,WAAW,CAAY;QACvB,WAAM,GAAN,MAAM,CAAO;IACnB,CAAC;IAEL,sBAAsB;IACtB,mCAAQ,GAAR;QAAA,iBASC;QARC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,iBAAO;YAC7C,6BAA6B;YAC7B,KAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAC3B,CAAC,EACD,aAAG;YACD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;IAtBU,gBAAgB;QAL5B,+DAAS,CAAC;YACT,QAAQ,EAAE,aAAa;YACvB,oHAAuC;;SAExC,CAAC;+EASsB,kEAAW;YAChB,sDAAM;OATZ,gBAAgB,CAwB5B;IAAD,uBAAC;CAAA;AAxB4B;;;;;;;;;;;;ACT7B,+DAA+D,+J;;;;;;;;;;;ACA/D,43B;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACgB;AACR;AACK;AACtB;AAOzC;IAME,iFAAiF;IACjF,2BACU,eAAgC,EAChC,YAAkC,EAClC,WAAwB,EACxB,MAAc;QAHd,oBAAe,GAAf,eAAe,CAAiB;QAChC,iBAAY,GAAZ,YAAY,CAAsB;QAClC,gBAAW,GAAX,WAAW,CAAa;QACxB,WAAM,GAAN,MAAM,CAAQ;IAClB,CAAC;IAEP,oCAAQ,GAAR;IACA,CAAC;IAED;;OAEG;IACH,4CAAgB,GAAhB;QAAA,iBAgCC;QA/BC,IAAM,IAAI,GAAG;YACX,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB;QAED,kBAAkB;QAClB,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE;YAChD,4CAA4C;YAC5C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,2BAA2B,EAAE,EAAC,QAAQ,EAAE,cAAc,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,OAAO,KAAK,CAAC;SACd;QAED,iBAAiB;QACjB,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACnD,2CAA2C;YAC3C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,0BAA0B,EAAE,EAAC,QAAQ,EAAE,cAAc,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;YAC9F,OAAO,KAAK,CAAC;SACd;QAED,gBAAgB;QAChB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,cAAI;YAChD,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,uCAAuC,EAAE,EAAC,QAAQ,EAAE,eAAe,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC5G,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;aAClC;iBAAM;gBACL,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,sBAAsB,EAAE,EAAC,QAAQ,EAAE,cAAc,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC1F,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;aACrC;QACH,CAAC,CAAC;IACJ,CAAC;IApDU,iBAAiB;QAL7B,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,uHAAwC;;SAEzC,CAAC;+EAS2B,0EAAe;YAClB,4EAAoB;YACrB,kEAAW;YAChB,sDAAM;OAXb,iBAAiB,CAqD7B;IAAD,wBAAC;CAAA;AArD6B;;;;;;;;;;;;;;;;;;;;ACXa;AACW;AACC;AAGvD;IACE,mBACU,WAAuB,EACvB,MAAa;QADb,gBAAW,GAAX,WAAW,CAAY;QACvB,WAAM,GAAN,MAAM,CAAO;IACpB,CAAC;IAEJ;;;OAGG;IACH,+BAAW,GAAX;QACE,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE;YACjC,sBAAsB;YACtB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjC,OAAO,KAAK,CAAC;SACd;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAlBU,SAAS;QADrB,gEAAU,EAAE;+EAGW,kEAAW;YAChB,sDAAM;OAHZ,SAAS,CAmBrB;IAAD,gBAAC;CAAA;AAnBqB;;;;;;;;;;;;;;;;;;;;;;ACLqB;AACG;AAC9C,kCAAkC;AACG;AACrC,kDAAkD;AACI;AACX;AAK3C;IAME,0CAA0C;IAC1C,qBACU,IAAS,EACV,SAA0B;QADzB,SAAI,GAAJ,IAAI,CAAK;QACV,cAAS,GAAT,SAAS,CAAiB;IAC7B,CAAC;IAEP;;;;OAIG;IACH,kCAAY,GAAZ,UAAa,IAAI;QACf,oBAAoB;QACpB,IAAI,OAAO,GAAG,IAAI,qDAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAC,kBAAkB,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,sDAAU,GAAG,gBAAgB,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;aAC3E,IAAI,CAAC,0DAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC,CAAC;IAClC,CAAC;IAED;;;OAGG;IACH,sCAAgB,GAAhB,UAAiB,IAAI;QACnB,oBAAoB;QACpB,IAAI,OAAO,GAAG,IAAI,qDAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAC,kBAAkB,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,sDAAU,GAAG,oBAAoB,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;aAC/E,IAAI,CAAC,0DAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC,CAAC;IAClC,CAAC;IAED;;;OAGG;IACH,gCAAU,GAAV;QACE,oBAAoB;QACpB,IAAI,OAAO,GAAG,IAAI,qDAAO,EAAE,CAAC;QAC5B,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,qBAAqB;QACrB,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAChD,OAAO,CAAC,MAAM,CAAC,cAAc,EAAC,kBAAkB,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,sDAAU,GAAG,eAAe,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;aACnE,IAAI,CAAC,0DAAG,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACH,mCAAa,GAAb,UAAc,KAAK,EAAE,IAAI;QACvB,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACxC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,+BAAS,GAAT;QACE,IAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/C,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IACzB,CAAC;IAED,eAAe;IACf,8BAA8B;IAC9B,IAAI;IAEJ;;OAEG;IACH,gCAAU,GAAV;QACE,OAAO,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,4BAAM,GAAN;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,YAAY,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IA1FU,WAAW;QAHvB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EASe,kDAAI;YACA,mEAAgB;OATxB,WAAW,CA2FvB;IAAD,kBAAC;CAAA;AA3FuB;;;;;;;;;;;;;;;;;;ACXmB;AAK3C;IAEE;IAAgB,CAAC;IAEjB;;;OAGG;IACH,0CAAgB,GAAhB,UAAiB,IAAI;QACnB,IAAI,IAAI,CAAC,IAAI,IAAI,SAAS,IAAI,IAAI,CAAC,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,QAAQ,IAAI,SAAS,EAAE;YACjH,OAAO,KAAK,CAAC;SACd;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAED;;;OAGG;IACH,uCAAa,GAAb,UAAc,KAAK;QACjB,IAAM,EAAE,GAAG,yJAAyJ,CAAC;QACrK,OAAO,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC;IAvBU,eAAe;QAH3B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;;OACW,eAAe,CAwB3B;IAAD,sBAAC;CAAA;AAxB2B;;;;;;;;;;;;;ACL5B;AAAA;AAAA,kFAAkF;AAClF,sDAAsD;AAEtD,sBAAsB;AACf,IAAM,UAAU,GAAG,EAAE,CAAC;;;;;;;;;;;;;ACJ7B;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<app-navbar></app-navbar>\\n<div class=\\\"container\\\">\\n  <flash-messages></flash-messages>\\n  <router-outlet></router-outlet>\\n</div>\"","// Bring in main angular package\nimport { Component } from '@angular/core';\n\n@Component({\n  // HTML tag we can use to insert the component\n  selector: 'app-root',\n  // html file which is associate with the component\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'angular-src';\n}\n","// Whenever create a component or service we should import them here\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { ProfileComponent } from './components/profile/profile.component';\n\nimport { ValidateService } from './services/validate.service';\nimport { AuthService } from './services/auth.service';\nimport { FlashMessagesModule } from 'angular2-flash-messages';\n\nimport { JwtModule } from '@auth0/angular-jwt';\nimport { AuthGuard } from './guards/auth.guard';\n\nconst appRoutes: Routes = [\n  // This could be the home page\n  {path:'', component: HomeComponent},\n  {path:'register', component: RegisterComponent},\n  {path:'login', component: LoginComponent},\n  {path:'dashboard', component: DashboardComponent, canActivate:[AuthGuard]},\n  {path:'profile', component: ProfileComponent, canActivate:[AuthGuard]},\n]\n\n// id_token is from storeUserData(token, user) in auth.service.ts\nexport function tokenGetter() {\n  return localStorage.getItem('id_token');\n}\n\n@NgModule({\n  // All the components should be put into declarations\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    LoginComponent,\n    RegisterComponent,\n    HomeComponent,\n    DashboardComponent,\n    ProfileComponent\n  ],\n  // Modules should be put into imports\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    RouterModule.forRoot(appRoutes),\n    // FlashMessagesModule\n    FlashMessagesModule.forRoot(),\n    JwtModule.forRoot({\n      config: {\n        tokenGetter: tokenGetter\n      }\n    })\n  ],\n  // Services should be put into providers\n  providers: [ValidateService, AuthService, AuthGuard],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZGFzaGJvYXJkL2Rhc2hib2FyZC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<h1 class=\\\"page-header\\\" style=\\\"margin-top: 15px\\\"><b>Dashboard</b></h1>\\n<hr>\\n<p>Welcome to your Dashboard!</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS9ob21lLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"jumbotron text-center\\\">\\n  <h1>MEAN Stack App Demo</h1>\\n  <hr>\\n  <p class=\\\"lead\\\">This is a MEAN Stack App Demo including some login/register functionalities.</p>\\n  <p class=\\\"lead\\\">Created by Guozhi Tang with refrences from Brad Traversy's Tutorials.</p>\\n  <div>\\n    <a class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/register']\\\"><i class=\\\"fas fa-user-plus\\\"></i> Register</a> <a class=\\\"btn btn-dark\\\" [routerLink]=\\\"['/login']\\\"><i class=\\\"fas fa-user\\\"></i> Login</a>\\n  </div>\\n</div>\\n<hr>\\n<h2><b>Back-end:</b></h2>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-md-3\\\">\\n    <h3>Express Backend</h3>\\n    <p>The whole backend server and RESTful API is completed by Node.js/Express. Additionally, it can communicate with the database.</p>\\n  </div>\\n  <div class=\\\"col-md-3\\\">\\n    <h3>MongoDB</h3>\\n    <p>Mongoose(Object Document Mapper) is used to irganize models and query the MongoDB database. All the information stored in collections could be JSON type. It is more powerful than Mongojs.</p>\\n  </div>\\n  <div class=\\\"col-md-3\\\">\\n      <h3>JWT Tokens</h3>\\n      <p>Full featured authentication using JSON web tokens. Login and store user data locally in \\\"Dev Tools/Application/Storage/Local Storage\\\". Protect and authenticate the password part of user.</p>\\n  </div>\\n  \\n  <div class=\\\"col-md-3\\\">\\n    <h3>CORS</h3>\\n    <p>Cross-origin Resource Sharing. In the demo the backend server and frontend angular are on different ports. In order to make request from front end, we need to enable this.</p>\\n  </div>\\n</div>\\n<hr>\\n<h2><b>Front-end:</b></h2>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-md-3\\\">\\n    <h3>Angular7/Angular-CLI</h3>\\n    <p>Angular-CLI(Command Line Interface)is used to generate components, services and more. As well as Local development server which is easy to do the compilation. Use ng build to compile everything to the output public folder(same port).</p>\\n  </div>\\n  <div class=\\\"col-md-3\\\">\\n    <h3>@auth0/angular-jwt</h3>\\n    <p>A module to handle the authentication tokens. Fetch the tokens from the server and store them in loacl storage. Check whether the token has expired yet.</p>\\n  </div>\\n  <div class=\\\"col-md-3\\\">\\n    <h3>Auth Guard</h3>\\n    <p>For authentication as far as routes, I use authentication guard which is able to set which page could is visible at this condition(login or not).</p>\\n  </div>\\n  <div class=\\\"col-md-3\\\">\\n    <h3>Bootstrap</h3>\\n    <p>Simply, the front-end framework is Bootstrap which is based on Twitter. Here are two helpful websites: <a href=\\\"https://bootswatch.com\\\">bootswatch</a> and <a href=\\\"https://getbootstrap.com/docs/4.3/examples/\\\">getboostrap</a> with many bootstrap examples.</p>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<h1 class=\\\"page-header\\\" style=\\\"margin-top: 15px\\\"><b>Login</b></h1>\\n<hr>\\n<form (submit)=\\\"onLoginSubmit()\\\">\\n  <div class=\\\"form-group\\\">\\n    <label>Username</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"username\\\" name=\\\"username\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n      <label>Password</label>\\n      <input type=\\\"password\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"password\\\" name=\\\"password\\\">\\n  </div>\\n  <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\"><i class=\\\"fas fa-user\\\"></i> Login</button>\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  // Add component properties\n  username: String;\n  password: String;\n\n  constructor(\n    private authService:AuthService,\n    private router:Router,\n    private flashMessage:FlashMessagesService\n    ) { }\n\n  ngOnInit() {\n  }\n\n  onLoginSubmit() {\n    // console.log(this.username);\n    const user = {\n      username: this.username,\n      password: this.password\n    }\n\n    // data is what we store after sending this request\n    this.authService.authenticateUser(user).subscribe(data => {\n      // console.log(data);\n      if (data.success) {\n        this.authService.storeUserData(data.token, data.user);\n        this.flashMessage.show('You are now logged in', {\n          cssClass: 'alert-success',\n          timeout: 5000});\n          this.router.navigate(['dashboard']);\n      } else {\n        this.flashMessage.show(data.msg, {\n          cssClass: 'alert-danger',\n          timeout: 5000});\n          this.router.navigate(['login']);\n      }\n    });\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbmF2YmFyL25hdmJhci5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<nav class=\\\"navbar navbar-expand-md navbar-dark bg-primary\\\">\\n  <a class=\\\"navbar-brand\\\" href=\\\"#\\\">MEAN App Demo</a>\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarColor01\\\" aria-controls=\\\"navbarColor01\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\n  </button>\\n\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarColor01\\\">\\n    <ul class=\\\"navbar-nav\\\">\\n      <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact: true}\\\">\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/']\\\"><i class=\\\"fas fa-home\\\"></i> Home</a>\\n      </li>\\n    </ul>\\n    <ul class=\\\"navbar-nav\\\">\\n      <li class=\\\"nav-item\\\" *ngIf=\\\"!authService.isTokenExp()\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact: true}\\\">\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/dashboard']\\\"><i class=\\\"fas fa-tachometer-alt\\\"></i> Dashboard</a>\\n    </li>\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"!authService.isTokenExp()\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact: true}\\\">\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/profile']\\\"><i class=\\\"far fa-id-card\\\"></i> Profile</a>\\n    </li>\\n\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"authService.isTokenExp()\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact: true}\\\">\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/login']\\\"><i class=\\\"fas fa-user\\\"></i> Login</a>\\n    </li>\\n    <li class=\\\"nav-item\\\" *ngIf=\\\"authService.isTokenExp()\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact: true}\\\">\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/register']\\\"><i class=\\\"fas fa-user-plus\\\"></i> Register</a>\\n    </li>\\n    <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" *ngIf=\\\"!authService.isTokenExp()\\\" (click)=\\\"onLogoutClick()\\\" href=\\\"#\\\"><i class=\\\"far fa-user\\\"></i> Logout</a>\\n    </li>\\n    </ul>\\n  </div>\\n</nav>\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor(\n    public authService:AuthService,\n    private router:Router,\n    private flashMessage:FlashMessagesService\n    ) { }\n\n  ngOnInit() {\n  }\n\n  /**\n   * Method to logout of the system and clear out the data in local storage\n   */\n  onLogoutClick() {\n    this.authService.logout();\n    this.flashMessage.show('You are logged out', {\n      cssClass: 'alert-success',\n      timeout: 3000\n    });\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcHJvZmlsZS9wcm9maWxlLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<!-- make sure there is a user loaded here and has been filled-->\\n<div *ngIf=\\\"user\\\">\\n  <h1 class=\\\"page-header\\\" style=\\\"margin-top: 15px\\\"><b>{{user.name}}</b></h1>\\n  <hr>\\n  <ul class=\\\"list-group\\\">\\n    <li class=\\\"list-group-item\\\">Username: {{user.username}}</li>\\n    <li class=\\\"list-group-item\\\">Email: {{user.email}}</li>\\n  </ul>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  user: {\n    name: String;\n    username: String;\n    email: String\n  };\n\n  constructor(\n    private authService:AuthService,\n    private router:Router\n  ) { }\n\n  // Initialize the user\n  ngOnInit() {\n    this.authService.getProfile().subscribe(profile => {\n      // console.log(profile.user);\n      this.user = profile.user;\n    },\n    err => {\n      console.log(err);\n      return false;\n    });\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<h1 class=\\\"page-header\\\" style=\\\"margin-top: 15px\\\"><b>Register</b></h1>\\n<hr>\\n<form (submit)=\\\"onRegisterSubmit()\\\">\\n  <div class=\\\"form-group\\\">\\n    <label>Name</label>\\n    <input type=\\\"text\\\" [(ngModel)]=\\\"name\\\" name=\\\"name\\\" class=\\\"form-control\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label>Username</label>\\n    <input type=\\\"text\\\" [(ngModel)]=\\\"username\\\" name=\\\"username\\\" class=\\\"form-control\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n      <label>Email</label>\\n      <input type=\\\"text\\\" [(ngModel)]=\\\"email\\\" name=\\\"email\\\" class=\\\"form-control\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n      <label>Password</label>\\n      <input type=\\\"password\\\" [(ngModel)]=\\\"password\\\" name=\\\"password\\\" class=\\\"form-control\\\">\\n  </div>\\n  <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\"><i class=\\\"fas fa-user-plus\\\"></i> Register</button>\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { ValidateService } from '../../services/validate.service';\nimport { AuthService } from '../../services/auth.service';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  name: String;\n  username: String;\n  email: String;\n  password: String;\n\n  // We need to inject into the constructor anytime we use a service in a component\n  constructor(\n    private validateService: ValidateService, \n    private flashMessage: FlashMessagesService,\n    private authService: AuthService,\n    private router: Router\n    ) { }\n\n  ngOnInit() {\n  }\n  \n  /**\n   * Method to submit the user information and add them to the database\n   */\n  onRegisterSubmit() {\n    const user = {\n      name: this.name,\n      email: this.email,\n      username: this.username,\n      password: this.password\n    }\n\n    // Required Fields\n    if (!this.validateService.validateRegister(user)) {\n      // console.log('Please fill in all fields');\n      this.flashMessage.show('Please fill in all fields', {cssClass: 'alert-danger', timeout: 3000});\n      return false;\n    }\n\n    // Validate Email\n    if (!this.validateService.validateEmail(user.email)) {\n      // console.log('Please use a valid email');\n      this.flashMessage.show('Please use a valid email', {cssClass: 'alert-danger', timeout: 3000});\n      return false;\n    }\n\n    // Register user\n    this.authService.registerUser(user).subscribe(data => {\n      if (data.success) {\n        this.flashMessage.show('You are now registered and can log in', {cssClass: 'alert-success', timeout: 3000});\n        this.router.navigate(['/login']);\n      } else {\n        this.flashMessage.show('Something went wrong', {cssClass: 'alert-danger', timeout: 3000});\n        this.router.navigate(['/register']);\n      }\n    })\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private authService:AuthService,\n    private router:Router\n  ) {}\n\n  /**\n   * Logic of routes here\n   * Some components can only be accessed after successfully login\n   */\n  canActivate() {\n    if (this.authService.isTokenExp()) {\n      // Re-direct our route\n      this.router.navigate(['/login']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}","import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\n// import 'rxjs/add/operator/map';\nimport { map } from 'rxjs/operators';\n// import { tokenNotExpired } from 'angular2-jwt';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { testServer } from '../testServer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  // have a couple of properties in the auth service\n  authToken: any;\n  user: any;\n\n  // Inject the modules into the constructor\n  constructor(\n    private http:Http,\n    public jwtHelper:JwtHelperService\n    ) { }\n\n  /**\n   * Function to register to the user\n   * Here is where we actually reach into our backend API and make that post request to register\n   * @param user json sent to local server conatining all information for users\n   */\n  registerUser(user) {\n    // Set header values\n    let headers = new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post(testServer + 'users/register', user, {headers: headers})\n      .pipe(map(res => res.json()));\n  }\n\n  /**\n   * Authenticate the login information for the specific users\n   * @param user json sent to local server conatining all information for authenticating existed users.\n   */\n  authenticateUser(user) {\n    // Set header values\n    let headers = new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post(testServer + 'users/authenticate', user, {headers: headers})\n      .pipe(map(res => res.json()));\n  }\n\n  /**\n   * Load the data in local storage and set it as current user\n   * Before login there should be a null user from users/nulluser\n   */\n  getProfile() {\n    // Set header values\n    let headers = new Headers();\n    this.loadToken();\n    // Use the token here\n    headers.append('Authorization', this.authToken);\n    headers.append('Content-Type','application/json');\n    return this.http.get(testServer + 'users/profile', {headers: headers})\n      .pipe(map(res => res.json()));\n  }\n\n  /**\n   * Store login information in local storage\n   * @param token the token information of authentication\n   * @param user the users information of login user\n   */\n  storeUserData(token, user) {\n    localStorage.setItem('id_token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n    this.authToken = token;\n    this.user = user;\n  }\n\n  /**\n   * Get token from local storage\n   */\n  loadToken() {\n    const token = localStorage.getItem('id_token');\n    this.authToken = token;\n  }\n\n  // loggedIn() {\n  //   return tokenNotExpired();\n  // }\n\n  /**\n   * Judge whether the token of login user has expired\n   */\n  isTokenExp(){\n    return this.jwtHelper.isTokenExpired();\n  }\n\n  /**\n   * Functionality of logout and set token and user information as null. Finally clear up the local storage\n   */\n  logout() {\n    this.authToken = null;\n    this.user = null;\n    localStorage.clear();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidateService {\n\n  constructor() { }\n\n  /**\n   * To judge that whether the register information for a user is correct or not null\n   * @param user json type register information for a user\n   */\n  validateRegister(user) {\n    if (user.name == undefined || user.email == undefined || user.username == undefined || user.password == undefined) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * To judge that whether the email information is in correct type\n   * @param email email information from input\n   */\n  validateEmail(email) {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n  }\n}\n","// When in development mode, the address for Node Server could be defined exactly \r\n// export const testServer = 'http://localhost:3000/';\r\n\r\n// For Production mode\r\nexport const testServer = '';","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}